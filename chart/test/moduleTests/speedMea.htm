<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
    <body>
        <div id="host" style='border: 1px solid #000; width:800px; height: 200px; position: absolute; top: 15px; left:10px;' >
        </div>
    </body>
    
    <script type="text/javascript">

        window.speedThreshold = 0.0; // px/ms
        var speedN_1 = 0.0, positionN_1 = 0.0, timeN_1 = 0.0, calculations = [], intervals = [], accelerationN_1;
        window.calculations = calculations;
        window.intervals = intervals;
        
        var element = document.getElementById('host');

        element.addEventListener('touchstart', function (eventObject) {

            positionN_1 = eventObject.changedTouches[0].pageX;
            timeN_1 = new Date().getTime();
            speedN_1 = 0.0;
            accelerationN_1 = 0.0;
            calculations.length = 0;
        });
        
        element.addEventListener('touchmove', function (eventObject) {

            eventObject.preventDefault();

            var positionN = eventObject.changedTouches[0].pageX;
            
            // speed calculation
            if (positionN <= 810) {
                var timeN = new Date().getTime(),
                              deltaT = timeN - timeN_1,
                              deltaP = positionN - positionN_1,
                              speedN = deltaP / deltaT,
                              accelerationN = (speedN - speedN_1) / deltaT;

                positionN_1 = positionN;
                speedN_1 = speedN;
                timeN_1 = timeN;
                accelerationN_1 = accelerationN;
                
                calculations.push({
                    deltaP: deltaP,
                    position: positionN,
                    deltaT: deltaT,
                    time: timeN,
                    speed: speedN,
                    acceleration: accelerationN
                });
            }
        });
        
        element.addEventListener('touchend', function (eventObject) {
            
        });
        
        function computeDesaceleration(decelerationValue, sampleNumber) {

            if (calculations.length) {

                intervals.length = 0;

                var speed = calculations[calculations.length - 1].speed, // px/ms
                    time = Math.abs(speed / decelerationValue), // ms
                    distance = (speed * time) + (decelerationValue * Math.pow(time, 2) / 2),
                    distanceN_1 = distance,
                    decelerationIntervals = Math.ceil(time / sampleNumber), // ms
                    timeN, distanceN, speedN, saplingTime = 0;
                

                intervals.push({
                    distance: distance,
                    time: time,
                    speed: speed,
                });

                do {
                    
                    --sampleNumber;
                    
                    saplingTime += decelerationIntervals;

                    if (saplingTime > time) {
                        saplingTime = time;
                    }

                    speedN = speed + (decelerationValue * saplingTime);
                    timeN = Math.abs(speedN / decelerationValue);
                    distanceN = (speedN * timeN) + (decelerationValue * Math.pow(timeN, 2) / 2);
                    
                    intervals.push({
                        distance: distanceN,
                        distance_delta: distanceN_1 - distanceN,
                        time: timeN,
                        speed: speedN
                    });

                    distanceN_1 = distanceN;


                } while (sampleNumber > 0)
            }

            return intervals;

        }
        
    </script>

</html>
